{"version":3,"sources":["components/Footer/Footer.js","components/Calculator.js","App.js","index.js"],"names":["Footer","className","Container","Row","Col","withRouter","useState","amount","interest","years","userInput","setUserInput","monthlyPayment","totalPayment","totalInterest","isResult","results","setResults","error","setError","handleInputChange","e","target","name","value","isValid","isNaN","Number","class","md","type","id","Form","onSubmit","preventDefault","inputAmount","calculatedInterest","calculatedPayments","x","Math","pow","isFinite","monthlyPaymentCalculated","toFixed","totalPaymentCalculated","totalInterestCalculated","calculateLoan","required","onChange","aria-label","min","max","step","htmlFor","readOnly","Button","variant","onClick","Card","Title","style","fontSize","color","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6aeb8089.chunk.js","sourcesContent":["import React from 'react'\nimport { Container, Row, Col } from 'react-bootstrap'\n\nconst Footer = () => {\n  return <footer className=\"footer\">\n    <Container>\n      <Row>\n        <Col className='footer text-center py-5 text-muted'>\n          Copyright &copy; Han Ng 2021\n        </Col>\n      </Row>\n    </Container>\n  </footer>\n}\n\nexport default Footer\n","import React, { useState } from 'react'\nimport { Container, Form, Button, Row, Col, Card } from 'react-bootstrap'\nimport { withRouter } from 'react-router-dom'\n\n\nconst Calculator = () => {\n  // using hooks to manage state\n  // initiate state with empty properties\n  const [userInput, setUserInput] = useState({\n    amount: '',\n    interest: '',\n    years: '',\n  })\n\n  // create state to store results value\n  const [results, setResults] = useState({\n    monthlyPayment: 0,\n    totalPayment: 0,\n    totalInterest: 0,\n    isResult: false\n  })\n\n  // handle errors\n\n  const [error, setError] = useState('')\n\n  const calculateLoan = ({ amount, interest, years }) => {\n\n    const inputAmount = Number(amount)\n\n    const calculatedInterest = Number((interest / 100 / 12))\n\n    // calculate for payments\n    const calculatedPayments = Number((years * 12))\n\n    const x = Math.pow(1 + calculatedInterest, calculatedPayments)\n\n    const monthlyPayment = (inputAmount * x * calculatedInterest) / (x - 1)\n\n    // check condition if monthly value passed in \n    // is a finite number\n    if (isFinite(monthlyPayment)) {\n      const monthlyPaymentCalculated = monthlyPayment.toFixed(2)\n      const totalPaymentCalculated = (monthlyPayment * calculatedPayments).toFixed(2)\n      const totalInterestCalculated = (monthlyPayment * calculatedPayments - inputAmount).toFixed(2)\n\n      // set results to state so we can display\n\n      setResults({\n        monthlyPayment: monthlyPaymentCalculated,\n        totalPayment: totalPaymentCalculated,\n        totalInterest: totalInterestCalculated,\n        isResult: true\n      })\n    }\n    return\n  }\n\n  const handleInputChange = (e) =>\n    setUserInput({ ...userInput, [e.target.name]: e.target.value })\n\n  const submitHandler = (e) => {\n    e.preventDefault()\n    // call the calculate function to calculate \n    // based on user input\n    if (isValid()) {\n      setError('')\n      calculateLoan(userInput)\n    }\n  }\n\n  // function to check if there's any error occurs\n  const isValid = () => {\n    const { amount, interest, years } = userInput\n\n    let error = ''\n\n    // valid all input numbers are numbers\n    if (isNaN(amount) || isNaN(interest) || isNaN(years)) {\n      // throw new Error('Must be a valid number')\n      error = 'Must be a valid number'\n    }\n\n    // valid all input numbers are positive numbers\n    if (Number(amount) <= 0 || Number(interest) <= 0 || Number(years) <= 0) {\n      error = 'Numbers must be positive'\n    }\n\n    if (error) {\n      setError(error)\n      return false\n    }\n    return true\n  }\n\n  // function to reset the calculator\n\n  const resetCalculator = () => {\n    // set state to be empty again\n    setUserInput({\n      amount: '',\n      interest: '',\n      years: ''\n    })\n\n    setError('')\n\n    setResults({\n      monthlyPayment: '',\n      totalPayment: '',\n      totalInterest: '',\n      isResult: false,\n    })\n  }\n\n\n  return (\n    <Container>\n      <h2>Loan Calculator <i class=\"fas fa-home\"></i></h2>\n      <Row className='py-3 my-3 box-around'>\n        <Col className='input-field' md={6}>\n          <div className='flex-container1'>\n            {error ? (\n              <div className=\"form-group has-danger\">\n                <input type=\"text\"\n                  value={error}\n                  className=\"form-control is-invalid\"\n                  id=\"inputInvalid\">\n                </input>\n              </div>\n            ) : ''}\n            <Form onSubmit={submitHandler}>\n              <div className=\"form-group\">\n                <label className=\"control-label\">Loan Amount</label>\n                <div className=\"form-group\">\n                  <div className=\"input-group mb-3\">\n                    <div className=\"input-group-prepend\">\n                      <span className=\"input-group-text\">$</span>\n                    </div>\n                    <input\n                      required\n                      type=\"number\"\n                      name='amount'\n                      value={userInput.amount}\n                      onChange={handleInputChange}\n                      className=\"form-control\"\n                      aria-label=\"Amount (to the nearest dollar)\">\n                    </input>\n                    <div className=\"input-group-append\">\n                      <span className=\"input-group-text\">.00</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"form-group\">\n                <label className=\"control-label\">Loan term in years</label>\n                <fieldset className=\"form-group\">\n                  <input\n                    value={userInput.years}\n                    onChange={(e) => setUserInput({ years: e.target.value })}\n                    min=\"1\" max=\"99\" step=\"0.5\"\n                    type=\"range\"\n                    className=\"custom-range\"\n                    id=\"customRange1\"></input>\n                </fieldset>\n                <div className=\"form-group\">\n                  <div className=\"input-group mb-3\">\n                    <input\n                      required\n                      type=\"number\"\n                      name='years'\n                      value={userInput.years}\n                      onChange={handleInputChange}\n                      className=\"form-control\"\n                    >\n                    </input>\n                  </div>\n                </div>\n              </div>\n\n              <h6>Or</h6>\n\n              <div className=\"form-group\">\n                <fieldset>\n                  <label className=\"control-label\" htmlFor=\"readOnlyInput\">Loan term in months</label>\n                  <input\n                    className=\"form-control\"\n                    id=\"readOnlyInput\"\n                    type=\"number\"\n                    name='months'\n                    value={userInput.years * 12}\n                    onChange={handleInputChange}\n                    readOnly='readOnly'\n                  >\n                  </input>\n                </fieldset>\n              </div>\n\n              <div className=\"form-group w-75\">\n                <label className=\"control-label\">Interest rate per year</label>\n                <fieldset className=\"form-group w-75\">\n                  <input\n                    onChange={(e) => setUserInput({ interest: e.target.value })}\n                    min=\"1\" max=\"99\" step=\"0.5\"\n                    type=\"range\"\n                    className=\"custom-range\"\n                    id=\"customRange1\"></input>\n                </fieldset>\n                <div className=\"form-group w-75\">\n                  <div className=\"input-group mb-3\">\n                    <input\n                      required\n                      type=\"number\"\n                      name='interest'\n                      value={userInput.interest}\n                      onChange={handleInputChange}\n                      className=\"form-control\"\n                    >\n                    </input>\n                    <div className=\"input-group-append\">\n                      <span className=\"input-group-text\">%</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className='w-75'>\n                <Button md={6}\n                  className='mr-2'\n                  type='submit'\n                  variant='primary'>\n                  CALCULATE\n              </Button>\n\n                <Button\n                  type='submit'\n                  onClick={resetCalculator}>\n                  RESET\n              </Button>\n              </div>\n\n            </Form>\n          </div>\n        </Col>\n\n        <Col md={6} className='results'>\n          {/* displaying results card */}\n          <div className='flex-container2'>\n            <div className='title'>\n              <Card.Title style={{ fontSize: '2rem', color: '#e6e6e6' }} className='px-4'>Monthly Payments</Card.Title>\n              <Card.Title style={{ color: '#e6e6e6' }} className='px-4'>\n                <span style={{ fontSize: '3rem' }}>${results.monthlyPayment}</span>\n              </Card.Title>\n            </div>\n            <div className=\"list-group-flush\">\n              <h4 style={{ color: '#e6e6e6' }}>Total Principal Paid <span>${userInput.amount}</span></h4>\n              <h4 style={{ color: '#e6e6e6' }}>Total Interest Paid <span>${results.totalInterest}</span></h4>\n            </div>\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default withRouter(Calculator)\n","import React from 'react'\nimport Footer from './components/Footer/Footer'\n\nimport Calculator from './components/Calculator'\n\nfunction App () {\n  return (\n    <>\n      <main>\n        <Calculator />\n      </main>\n      <Footer />\n    </>\n  )\n}\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './bootstrap.min.css'\nimport './index.scss'\nimport App from './App'\nimport { HashRouter } from 'react-router-dom'\n\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}